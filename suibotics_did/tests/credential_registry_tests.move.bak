#[test_only]
module suibotics_did::credential_registry_tests {
    use sui::test_scenario::{Self as ts, Scenario};
    use sui::tx_context::{Self, TxContext};
    use std::vector;
    
    use suibotics_did::credential_registry;
    use suibotics_did::identity_types::{
        CredentialInfo,
        credential_info_subject, credential_info_issuer, credential_info_schema,
        credential_info_data_hash, credential_info_revoked, credential_info_issued_at,
        E_INVALID_CONTROLLER
    };

    // Test addresses
    const ISSUER: address = @0x1111;
    const SUBJECT: address = @0x2222;
    const OTHER: address = @0x3333;

    // Test helper to create a dummy SHA-256 hash
    fun dummy_sha256_hash(): vector<u8> {
        let mut hash = vector::empty<u8>();
        let mut i = 0;
        while (i < 32) {
            vector::push_back(&mut hash, (i as u8));
            i = i + 1;
        };
        hash
    }

    // Test helper to create another dummy SHA-256 hash
    fun dummy_sha256_hash_2(): vector<u8> {
        let mut hash = vector::empty<u8>();
        let mut i = 0;
        while (i < 32) {
            vector::push_back(&mut hash, ((i + 50) as u8));
            i = i + 1;
        };
        hash
    }

    #[test]
    fun test_issue_credential_success() {
        let mut scenario = ts::begin(ISSUER);
        
        // Issue a credential
        credential_registry::issue_credential(
            SUBJECT,
            b"FirmwareCertV1".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        
        // Verify the credential was transferred to the subject
        let cred = ts::take_from_sender<CredentialInfo>(&scenario);
        
        // Verify credential properties
        assert!(credential_info_subject(&cred) == SUBJECT, 0);
        assert!(credential_info_issuer(&cred) == ISSUER, 1);
        assert!(credential_info_schema(&cred) == &b"FirmwareCertV1".to_vector(), 2);
        assert!(credential_info_data_hash(&cred) == &dummy_sha256_hash(), 3);
        assert!(!credential_info_revoked(&cred), 4);
        assert!(credential_info_issued_at(&cred) > 0, 5);
        
        ts::return_to_sender(&scenario, cred);
        ts::end(scenario);
    }

    #[test]
    fun test_credential_getters() {
        let mut scenario = ts::begin(ISSUER);
        
        // Issue a credential
        credential_registry::issue_credential(
            SUBJECT,
            b"TestSchema".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        let cred = ts::take_from_sender<CredentialInfo>(&scenario);
        
        // Test all getter functions
        assert!(credential_registry::get_issuer(&cred) == ISSUER, 0);
        assert!(credential_registry::get_subject(&cred) == SUBJECT, 1);
        assert!(credential_registry::get_schema(&cred) == &b"TestSchema".to_vector(), 2);
        assert!(credential_registry::get_data_hash(&cred) == &dummy_sha256_hash(), 3);
        assert!(credential_registry::get_issued_at(&cred) > 0, 4);
        assert!(!credential_registry::is_revoked(&cred), 5);
        
        ts::return_to_sender(&scenario, cred);
        ts::end(scenario);
    }

    #[test]
    fun test_revoke_credential_success() {
        let mut scenario = ts::begin(ISSUER);
        
        // Issue a credential
        credential_registry::issue_credential(
            SUBJECT,
            b"FirmwareCertV1".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        let mut cred = ts::take_from_sender<CredentialInfo>(&scenario);
        
        // Verify it's not revoked initially
        assert!(!credential_registry::is_revoked(&cred), 0);
        
        ts::next_tx(&mut scenario, ISSUER);
        
        // Revoke the credential (as the issuer)
        credential_registry::revoke_credential(&mut cred, ts::ctx(&mut scenario));
        
        // Verify it's now revoked
        assert!(credential_registry::is_revoked(&cred), 1);
        assert!(credential_info_revoked(&cred), 2);
        
        ts::return_to_address(SUBJECT, cred);
        ts::end(scenario);
    }

    #[test, expected_failure(abort_code = E_INVALID_CONTROLLER)]
    fun test_revoke_credential_invalid_controller() {
        let mut scenario = ts::begin(ISSUER);
        
        // Issue a credential
        credential_registry::issue_credential(
            SUBJECT,
            b"FirmwareCertV1".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        let mut cred = ts::take_from_sender<CredentialInfo>(&scenario);
        
        ts::next_tx(&mut scenario, OTHER); // Switch to unauthorized user
        
        // Try to revoke as someone other than the issuer - should fail
        credential_registry::revoke_credential(&mut cred, ts::ctx(&mut scenario));
        
        ts::return_to_address(SUBJECT, cred);
        ts::end(scenario);
    }

    #[test]
    fun test_multiple_credentials_same_subject() {
        let mut scenario = ts::begin(ISSUER);
        
        // Issue first credential
        credential_registry::issue_credential(
            SUBJECT,
            b"Schema1".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        // Issue second credential to the same subject
        credential_registry::issue_credential(
            SUBJECT,
            b"Schema2".to_vector(),
            dummy_sha256_hash_2(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        
        // Subject should have received both credentials
        let cred1 = ts::take_from_sender<CredentialInfo>(&scenario);
        let cred2 = ts::take_from_sender<CredentialInfo>(&scenario);
        
        // Verify they are different credentials
        assert!(credential_info_schema(&cred1) != credential_info_schema(&cred2), 0);
        assert!(credential_info_data_hash(&cred1) != credential_info_data_hash(&cred2), 1);
        
        // Both should have the same subject and issuer
        assert!(credential_info_subject(&cred1) == SUBJECT, 2);
        assert!(credential_info_subject(&cred2) == SUBJECT, 3);
        assert!(credential_info_issuer(&cred1) == ISSUER, 4);
        assert!(credential_info_issuer(&cred2) == ISSUER, 5);
        
        ts::return_to_sender(&scenario, cred1);
        ts::return_to_sender(&scenario, cred2);
        ts::end(scenario);
    }

    #[test]
    fun test_multiple_issuers() {
        let mut scenario = ts::begin(ISSUER);
        
        // First issuer issues a credential
        credential_registry::issue_credential(
            SUBJECT,
            b"Schema1".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, OTHER); // Switch to second issuer
        
        // Second issuer issues a credential to the same subject
        credential_registry::issue_credential(
            SUBJECT,
            b"Schema2".to_vector(),
            dummy_sha256_hash_2(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        
        // Subject should have both credentials
        let cred1 = ts::take_from_sender<CredentialInfo>(&scenario);
        let cred2 = ts::take_from_sender<CredentialInfo>(&scenario);
        
        // Verify different issuers
        let issuer1 = credential_info_issuer(&cred1);
        let issuer2 = credential_info_issuer(&cred2);
        assert!(issuer1 != issuer2, 0);
        assert!(issuer1 == ISSUER || issuer1 == OTHER, 1);
        assert!(issuer2 == ISSUER || issuer2 == OTHER, 2);
        
        ts::return_to_sender(&scenario, cred1);
        ts::return_to_sender(&scenario, cred2);
        ts::end(scenario);
    }

    #[test]
    fun test_credential_lifecycle() {
        let mut scenario = ts::begin(ISSUER);
        
        // Issue credential
        credential_registry::issue_credential(
            SUBJECT,
            b"LifecycleTest".to_vector(),
            dummy_sha256_hash(),
            ts::ctx(&mut scenario)
        );
        
        ts::next_tx(&mut scenario, SUBJECT);
        let mut cred = ts::take_from_sender<CredentialInfo>(&scenario);
        
        // Initially active
        assert!(!credential_registry::is_revoked(&cred), 0);
        
        ts::next_tx(&mut scenario, ISSUER);
        
        // Revoke it
        credential_registry::revoke_credential(&mut cred, ts::ctx(&mut scenario));
        
        // Now revoked
        assert!(credential_registry::is_revoked(&cred), 1);
        
        // Properties should remain the same except revocation status
        assert!(credential_info_subject(&cred) == SUBJECT, 2);
        assert!(credential_info_issuer(&cred) == ISSUER, 3);
        assert!(credential_info_schema(&cred) == &b"LifecycleTest".to_vector(), 4);
        assert!(credential_info_data_hash(&cred) == &dummy_sha256_hash(), 5);
        
        ts::return_to_address(SUBJECT, cred);
        ts::end(scenario);
    }
} 